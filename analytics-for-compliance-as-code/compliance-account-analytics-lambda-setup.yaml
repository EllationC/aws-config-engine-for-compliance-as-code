#
# Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.
#

#
# No change is needed in this template
#

AWSTemplateFormatVersion: 2010-09-09
Description: Sets up a lambda for analytics
Parameters:
  SourceLambdaBucket:
    Type: String
    Description: Bucket name and key where lambda code zips are placed
    MaxLength: 63
    MinLength: 3
    ConstraintDescription: Enter the name (not the ARN); must be in the same region as the CloudFormation stack
  SourceLambdaKeyPrefix:
    Type: String
    Description: Object key prefix where lambda code zips are placed.
    MaxLength: 63
    MinLength: 3
    ConstraintDescription: Enter the prefix with trailing "/"
  LambdaName:
    Type: String
    Description: Lambda zip name to deploy (name of rule will be the same)
    ConstraintDescription: Do not include ".zip"
  LambdaRuleRoleARN:
    ConstraintDescription: Enter Role ARN to be attached to the Lambda
    Description: Must be full ARN of the IAM Role
    Type: String
  DestinationBucket:
    Description: Bucket name where the CSV should be pushed.
    Type: String

Resources:
  RuleSetRuleLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref SourceLambdaBucket
        S3Key: !Join
          - ""
          - - !Ref SourceLambdaKeyPrefix
            - !Join [ ".", [ !Ref LambdaName , zip]]
      FunctionName: !Ref LambdaName
      Handler: !Join [ ".", [ !Ref LambdaName , lambda_handler]]
      Role: !Ref LambdaRuleRoleARN
      Environment:
        Variables:
          Bucket: !Ref DestinationBucket
      Runtime: python3.6
      Timeout: 300

  RuleSetRuleLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaName
      Principal: lambda.amazonaws.com
    DependsOn: RuleSetRuleLambda

  ScheduledEventsRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Scheduled event trigger"
      ScheduleExpression: "rate(1 hour)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt RuleSetRuleLambda.Arn
        - Id: !Ref LambdaName
    DependsOn: RuleSetRuleLambda

  PermissionForEventsToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref LambdaName
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledEventsRule.Arn
    DependsOn: RuleSetRuleLambda
