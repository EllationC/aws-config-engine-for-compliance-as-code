#
# Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.
#

AWSTemplateFormatVersion: 2010-09-09
Description: Sets up the Analytics for the Compliance-as-Code.
Parameters:
  SourceLambdaBucket:
    Type: String
    Description: Bucket name where lambda code zips are placed
    MaxLength: 63
    MinLength: 3
    ConstraintDescription: Enter the name not the ARN, must be in the same region as the stack

  ReportS3BucketName:
    ConstraintDescription: Enter DNS-compliant prefix
    Description: Bucket prefix where the processed CSV including the data from DynamoDB are stored. A dash and the account ID (12-digit) will be appended to it
    Default: analytics-compliance-as-code
    MaxLength: 63
    MinLength: 10
    Type: String

  DataSampleFeatures:
    Description: Create 2 additional lambda functions to create/delete a sample of data to test the Compliance Engine.
    Default: false
    AllowedValues:
      - true
      - false
    Type: String

Conditions:
    DataSample: !Equals [ !Ref DataSampleFeatures, true ]

Resources:
  LambdaRuleIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: Cac-Analytics-Lambda-Role
      Path: /service-role/
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/SecurityAudit'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess'
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17

  LambdaRuleLogPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      Roles:
      - Cac-Analytics-Lambda-Role
      PolicyName: LambdaRuleLogPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'logs:CreateLogGroup'
            Resource: !Join
              - ':'
              - - 'arn:aws:logs'
                - !Ref 'AWS::Region'
                - !Ref 'AWS::AccountId'
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              - !Join [ '', ['arn:aws:logs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':log-group:/aws/lambda/*', ':*']]
    DependsOn: LambdaRuleIAMRole

  LambdaRuleDynamoPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      Roles:
      - Cac-Analytics-Lambda-Role
      PolicyName: LambdaRuleDynamoPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:CreateTable
              - dynamodb:DeleteTable
              - dynamodb:UpdateItem
              - dynamodb:PutItem
            Resource: !Join
              - ':'
              - - 'arn:aws:dynamodb'
                - !Ref 'AWS::Region'
                - !Ref 'AWS::AccountId'
                - 'table/ComplianceStatusTable'
          - Effect: Allow
            Action:
              - dynamodb:CreateTable
              - dynamodb:DeleteTable
              - dynamodb:UpdateItem
              - dynamodb:PutItem
            Resource: !Join
              - ':'
              - - 'arn:aws:dynamodb'
                - !Ref 'AWS::Region'
                - !Ref 'AWS::AccountId'
                - 'table/ComplianceEventsTable'
          - Effect: Allow
            Action:
              - "dynamodb:Describe*"
            Resource: "*"
    DependsOn:
    - LambdaRuleIAMRole

  ReportS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ "-", [ !Ref ReportS3BucketName, !Ref 'AWS::AccountId']]
      LifecycleConfiguration:
        Rules:
        - Status: Enabled
          Transitions:
          - StorageClass: STANDARD_IA
            TransitionInDays: 30
      Tags:
      - Key: Owner
        Value: Security
      VersioningConfiguration:
        Status: Enabled

  ReportS3BucketPolicy:
    DependsOn: ReportS3Bucket
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Join [ "-", [ !Ref ReportS3BucketName, !Ref 'AWS::AccountId']]
      PolicyDocument:
        Statement:
        - Action: s3:*
          Effect: Allow
          Principal:
            AWS: !GetAtt LambdaRuleIAMRole.Arn
          Resource:
            - !Join [ "", ["arn:aws:s3:::", !Ref ReportS3BucketName, "-", !Ref 'AWS::AccountId']]
            - !Join [ "", ["arn:aws:s3:::", !Ref ReportS3BucketName, "-", !Ref 'AWS::AccountId','/*']]
          Sid: LambdaAllow
        Version: '2012-10-17'

  CreateLambdaCSVforEvents:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ['/', ['https://s3.amazonaws.com', !Ref SourceLambdaBucket, 'compliance-account-analytics-lambda-setup.yaml']]
      Parameters:
        LambdaName: csv_ComplianceEventsTable_to_s3
        SourceLambdaBucket: !Ref SourceLambdaBucket
        LambdaRuleRoleARN: !GetAtt LambdaRuleIAMRole.Arn
        DestinationBucket: !Join [ "-", [ !Ref ReportS3BucketName, !Ref 'AWS::AccountId']]
    DependsOn:
    - LambdaRuleIAMRole
    - ReportS3Bucket

  CreateLambdaGenerateData:
    Condition: DataSample
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ['/', ['https://s3.amazonaws.com', !Ref SourceLambdaBucket, 'compliance-account-analytics-lambda-setup.yaml']]
      Parameters:
        LambdaName: GenerateData
        SourceLambdaBucket: !Ref SourceLambdaBucket
        LambdaRuleRoleARN: !GetAtt LambdaRuleIAMRole.Arn
        DestinationBucket: !Join [ "-", [ !Ref ReportS3BucketName, !Ref 'AWS::AccountId']]
    DependsOn:
    - LambdaRuleIAMRole
    - ReportS3Bucket

  CreateLambdaDeleteData:
    Condition: DataSample
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ['/', ['https://s3.amazonaws.com', !Ref SourceLambdaBucket, 'compliance-account-analytics-lambda-setup.yaml']]
      Parameters:
        LambdaName: DeleteData
        SourceLambdaBucket: !Ref SourceLambdaBucket
        LambdaRuleRoleARN: !GetAtt LambdaRuleIAMRole.Arn
        DestinationBucket: !Join [ "-", [ !Ref ReportS3BucketName, !Ref 'AWS::AccountId']]
    DependsOn:
    - LambdaRuleIAMRole
    - ReportS3Bucket

  CreateLambdaPushBatchDdb24Items:
    Condition: DataSample
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ['/', ['https://s3.amazonaws.com', !Ref SourceLambdaBucket, 'compliance-account-analytics-lambda-setup.yaml']]
      Parameters:
        LambdaName: GenerateData_PushBatchDynamoDB24items
        SourceLambdaBucket: !Ref SourceLambdaBucket
        LambdaRuleRoleARN: !GetAtt LambdaRuleIAMRole.Arn
        DestinationBucket: !Join [ "-", [ !Ref ReportS3BucketName, !Ref 'AWS::AccountId']]
    DependsOn:
    - LambdaRuleIAMRole
    - ReportS3Bucket

  AthenaNamedQueryInitDB:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: "default"
      Description: "(To be run 1st) A query to build database for advanced analytics"
      Name: "Database For ComplianceAsCode"
      QueryString: "CREATE DATABASE IF NOT EXISTS complianceascode"

  AthenaNamedQueryInitTable:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: "complianceascode"
      Description: "(To be run 2nd) A query to build table for advanced analytics"
      Name: "Table For ComplianceAsCode"
      QueryString: !Join
        - ""
        - - "CREATE EXTERNAL TABLE IF NOT EXISTS complianceascode.events (AccountID string,ComplianceType string,RecordedInDDBTimestamp string,RuleName string,LastResultRecordedTime string,RuleARN string,ResourceID string,ResourceType string,AccountClassification string,RuleCriticity string) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe' WITH SERDEPROPERTIES ('serialization.format' = ',', 'field.delim' = ',') LOCATION 's3://"
          - !Join [ "-", [ !Ref ReportS3BucketName, !Ref 'AWS::AccountId']]
          - "/' TBLPROPERTIES('has_encrypted_data'='false', 'skip.header.line.count'='1')"
